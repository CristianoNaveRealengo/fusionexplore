{
  "version": 3,
  "sources": ["../../aframe-environment-component/index.js"],
  "sourcesContent": ["/* global AFRAME, THREE */\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\nAFRAME.registerComponent('environment', {\r\n  schema: {\r\n    active: {default: false},\r\n    preset: {default: 'default', oneOf: ['none', 'default', 'contact', 'egypt', 'checkerboard', 'forest', 'goaland', 'yavapai', 'goldmine', 'arches', 'threetowers', 'poison', 'tron', 'japan', 'dream', 'volcano', 'starry', 'osiris']},\r\n    seed: {type: 'int', default: 1, min: 0, max: 1000},\r\n\r\n    skyType: {default: 'color', oneOf:['none', 'color', 'gradient', 'atmosphere']},\r\n    skyColor: {type: 'color'},\r\n    horizonColor: {type: 'color'},\r\n    lighting: {default: 'distant', oneOf: ['none', 'distant', 'point']},\r\n    shadow: {default: false},\r\n    shadowSize: { default: 10},\r\n    lightPosition: {type:'vec3', default: {x: 0, y: 1, z: -0.2}},\r\n    fog: {type:'float', default: 0, min: 0, max: 1},\r\n\r\n    flatShading: {default: false},\r\n    playArea: {type: 'float', default: 1, min: 0.5, max: 10},\r\n    stageSize: {type: 'number', default: 200, min: 1, max: 20000},\r\n\r\n    ground: {default: 'hills', oneOf:['none', 'flat', 'hills', 'canyon', 'spikes', 'noise']},\r\n    groundYScale: {type: 'float', default: 3, min: 0, max: 50},\r\n    groundTexture: {default: 'none', oneOf:['none', 'checkerboard', 'squares', 'walkernoise']},\r\n    groundColor:  {type: 'color', default: '#553e35'},\r\n    groundColor2: {type: 'color', default: '#694439'},\r\n    groundDensity: {type: 'number', default: 64, min: 8, max: 1024},\r\n    groundFrequency: {type: 'number', default: 10, min: 0.1, max: 1000},\r\n\r\n    dressing: {default: 'none', oneOf:['none', 'cubes', 'pyramids', 'cylinders', 'hexagons', 'stones', 'trees', 'mushrooms', 'towers', 'apparatus', 'arches', 'torii']},\r\n    dressingAmount: {type: 'int', default: 10, min: 0, max: 1000},\r\n    dressingColor:  {type: 'color', default: '#795449'},\r\n    dressingScale: {type: 'float', default: 5, min: 0, max: 100},\r\n    dressingVariance: {type: 'vec3', default: {x: 1, y: 1, z: 1}},\r\n    dressingUniformScale: {default: true},\r\n    dressingOnPlayArea: {type: 'float', default: 0, min: 0, max: 1},\r\n\r\n    grid: {default:'none', oneOf:['none', '1x1', '2x2', 'crosses', 'dots', 'xlines', 'ylines']},\r\n    gridColor: {type: 'color', default: '#ccc'}\r\n  },\r\n\r\n  multiple: false,\r\n\r\n  presets: {\r\n    'none' : {},\r\n    'default' : {active: true, seed: 1, skyType: 'atmosphere', skyColor: '#88c', horizonColor: '#ddd', lighting: 'distant', lightPosition: { x: -0.11, y: 1, z: 0.33}, fog: 0.78, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 3, groundTexture: 'checkerboard', groundColor: '#454545', groundColor2: '#5d5d5d', dressing: 'none', dressingAmount: 10, dressingColor: '#795449', dressingScale: 1, dressingVariance: { x: 0, y: 0, z: 0}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'none', gridColor: '#ccc', shadow: false},\r\n    'contact': {active: true, seed: 14, skyType: 'gradient', skyColor: '#478d54', horizonColor: '#b696cb', lighting: 'distant', lightPosition: { x: 0, y: 2.01, z: -1}, fog: 0.8, flatShading: false, playArea: 1, ground: 'spikes', groundYScale: 4.91, groundTexture: 'none', groundColor: '#2e455f', groundColor2: '#694439', dressing: 'apparatus', dressingAmount: 7, dressingColor: '#657067', dressingScale: 20, dressingVariance: { x: 20, y: 20, z: 20}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: '1x1', gridColor: '#478d54', shadow: false},\r\n    'egypt': {active: true, seed: 26, skyType: 'gradient', skyColor: '#1b7660', horizonColor: '#e4b676', lighting: 'distant', lightPosition: { x: 0, y: 1.65, z: -1}, fog: 0.75, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 5, groundTexture: 'walkernoise', groundColor: '#664735', groundColor2: '#6c4b39', dressing: 'pyramids', dressingAmount: 10, dressingColor: '#7c5c45', dressingScale: 5, dressingVariance: { x: 20, y: 20, z: 20}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'spots', gridColor: '#e4b676', shadow: false},\r\n    'checkerboard': {active: true, seed: 1, skyType: 'gradient', skyColor: '#0d0d0d', horizonColor: '#404040', lighting: 'distant', lightPosition: { x: 0, y: 1, z: -0.2}, fog: 0.81, flatShading: true, playArea: 1, ground: 'hills', groundYScale: 4.81, groundTexture: 'checkerboard', groundColor: '#252525', groundColor2: '#111111', dressing: 'cubes', dressingAmount: 10, dressingColor: '#9f9f9f', dressingScale: 1.51, dressingVariance: { x: 5, y: 20, z: 5}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'dots', gridColor: '#ccc', shadow: false},\r\n    'forest': {active: true, seed: 8, skyType: 'gradient', skyColor: '#24b59f', horizonColor: '#eff9b7', lighting: 'distant', lightPosition: { x: -1.2, y: 0.88, z: -0.55}, fog: 0.8, flatShading: false, playArea: 1, ground: 'noise', groundYScale: 4.18, groundTexture: 'squares', groundColor: '#937a24', groundColor2: '#987d2e', dressing: 'trees', dressingAmount: 500, dressingColor: '#888b1d', dressingScale: 1, dressingVariance: { x: 10, y: 10, z: 10}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'none', gridColor: '#c5a543', shadow: false},\r\n    'goaland': {active: true, seed: 17, skyType: 'gradient', skyColor: '#14645f', horizonColor: '#a3dab8', lighting: 'point', lightPosition: { x: 0.1, y: 4, z: 0.56}, fog: 0.73, flatShading: false, playArea: 1, ground: 'noise', groundYScale: 0.81, groundTexture: 'none', groundColor: '#ae3241', groundColor2: '#db4453', dressing: 'mushrooms', dressingAmount: 150, dressingColor: '#a9313d', dressingScale: 5, dressingVariance: { x: 5, y: 10, z: 5}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'dots', gridColor: '#239893', shadow: false},\r\n    'yavapai': {active: true, seed: 11, skyType: 'gradient', skyColor: '#239849', horizonColor: '#cfe0af', lighting: 'distant', lightPosition: { x: 0.5, y: 1, z: 0}, fog: 0.8, flatShading: true, playArea: 1, ground: 'canyon', groundYScale: 9.76, groundTexture: 'walkernoise', groundColor: '#C66344', groundColor2: '#c96b4b', dressing: 'stones', dressingAmount: 500, dressingColor: '#C66344', dressingScale: 0.06, dressingVariance: { x: 0.2, y: 0.1, z: 0.2}, dressingUniformScale: true, dressingOnPlayArea: 1, grid: 'none', gridColor: '#239893', shadow: false},\r\n    'goldmine': {active: true, seed: 53, skyType: 'gradient', skyColor: '#1e1c1a', horizonColor: '#8c7964', lighting: 'point', lightPosition: { x: -0.09, y: 3, z: 0.33}, fog: 0.43, flatShading: true, playArea: 1.08, ground: 'canyon', groundYScale: 50, groundTexture: 'none', groundColor: '#353535', groundColor2: '#454545', dressing: 'hexagons', dressingAmount: 300, dressingColor: '#fe921b', dressingScale: 0.5, dressingVariance: { x: 2, y: 8, z: 2}, dressingUniformScale: true, dressingOnPlayArea: 0.03, grid: 'none', gridColor: '#ccc', shadow: false},\r\n    'threetowers': {active: true, seed: 5, skyType: 'gradient', skyColor: '#23a06b', horizonColor: '#f5e170', lighting: 'distant', lightPosition: { x: 0.5, y: 1, z: 0}, fog: 0.8, flatShading: false, playArea: 1, ground: 'spikes', groundYScale: 4.26, groundTexture: 'walkernoise', groundColor: '#273a49', groundColor2: '#2b464f', dressing: 'towers', dressingAmount: 3, dressingColor: '#5f6d94', dressingScale: 50, dressingVariance: { x: 10, y: 100, z: 10}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'none', gridColor: '#239893', shadow: false},\r\n    'poison': {active: true, seed: 92, skyType: 'gradient', skyColor: '#1ea84a', horizonColor: '#177132', lighting: 'distant', lightPosition: { x: 0.5, y: 1, z: 0}, fog: 0.8, flatShading: false, playArea: 1, ground: 'canyon', groundYScale: 9.76, groundTexture: 'none', groundColor: '#851f31', groundColor2: '#912235', dressing: 'hexagons', dressingAmount: 20, dressingColor: '#c7415b', dressingScale: 20, dressingVariance: { x: 20, y: 200, z: 20}, dressingUniformScale: false, dressingOnPlayArea: 0, grid: 'crosses', gridColor: '#1ea84a', shadow: false},\r\n    'arches': {active: true, seed: 19, skyType: 'atmosphere', skyColor: '#8cbdc8', horizonColor: '#ddd', lighting: 'distant', lightPosition: { x: -0.11, y: 0.16, z: 0.33}, fog: 0.67, flatShading: true, playArea: 1, ground: 'canyon', groundYScale: 10, groundTexture: 'walkernoise', groundColor: '#a87d6f', groundColor2: '#795449', dressing: 'arches', dressingAmount: 6, dressingColor: '#795449', dressingScale: 26, dressingVariance: { x: 20, y: 40, z: 20}, dressingUniformScale: true, dressingOnPlayArea: 0.04, grid: 'none', gridColor: '#ccc', shadow: false},\r\n    'tron': {active: true, seed: 14, skyType: 'gradient', skyColor: '#091b39', horizonColor: '#284a9e', lighting: 'distant', lightPosition: { x: -0.72, y: 0.62, z: 0.4}, fog: 0.8, flatShading: false, playArea: 1, ground: 'spikes', groundYScale: 4.91, groundTexture: 'none', groundColor: '#061123', groundColor2: '#694439', dressing: 'towers', dressingAmount: 5, dressingColor: '#fb000e', dressingScale: 15, dressingVariance: { x: 20, y: 20, z: 20}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: '1x1', gridColor: '#fb000e', shadow: false},\r\n    'japan': {active: true, seed: 14, skyType: 'gradient', skyColor: '#7e5db5', horizonColor: '#b4adda', lighting: 'distant', lightPosition: { x: 1.33, y: 1, z: 0.24}, fog: 0.9, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 25, groundTexture: 'walkernoise', groundColor: '#7e5db5', groundColor2: '#cabdf5', dressing: 'torii', dressingAmount: 4, dressingColor: '#bc5e7c', dressingScale: 15, dressingVariance: { x: 0, y: 0, z: 0}, dressingUniformScale: true, dressingOnPlayArea: 0, grid: 'spots', gridColor: '#e4b676', shadow: false},\r\n    'dream': {active: true, seed: 17, skyType: 'gradient', skyColor: '#87faf4', horizonColor: '#b34093', lighting: 'distant', lightPosition: { x: -0.72, y: 0.53, z: 0.97}, fog: 0.8, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 20, groundTexture: 'checkerboard', groundColor: '#b34093', groundColor2: '#c050a2', dressing: 'mushrooms', dressingAmount: 300, dressingColor: '#3cf7ed', dressingScale: 0.2, dressingVariance: { x: 0.2, y: 0.2, z: 0.2}, dressingUniformScale: true, dressingOnPlayArea: 1, grid: 'none', gridColor: '#239893', shadow: false},\r\n    'volcano': {active: true, seed: 92, skyType: 'gradient', skyColor: '#4a070f', horizonColor: '#f62300', lighting: 'point', lightPosition: { x: 0.5, y: 2.25, z: 0}, fog: 0.87, flatShading: false, playArea: 1, ground: 'canyon', groundYScale: 9.76, groundTexture: 'walkernoise', groundColor: '#fb0803', groundColor2: '#510000', dressing: 'arches', dressingAmount: 15, dressingColor: '#fb0803', dressingScale: 3, dressingVariance: { x: 10, y: 100, z: 10}, dressingUniformScale: false, dressingOnPlayArea: 0.2, grid: 'none', gridColor: '#fa0e00', shadow: false},\r\n    'starry': {active: true, seed: 1, skyType: 'atmosphere', skyColor: '#88c', horizonColor: '#ddd', lighting: 'distant', lightPosition: { x: 0, y: -0.01, z: -0.46}, fog: 0.7, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 3, groundTexture: 'none', groundColor: '#553e35', groundColor2: '#694439', dressing: 'none', dressingAmount: 100, dressingColor: '#795449', dressingScale: 5, dressingVariance: { x: 1, y: 1, z: 1}, dressingUniformScale: true, grid: '1x1', dressingOnPlayArea: 0, gridColor: '#39d2f2', shadow: false},\r\n    'osiris': {active: true, seed: 46, skyType: 'atmosphere', skyColor: '#88c', horizonColor: '#ddd', lighting: 'distant', lightPosition: { x: 0, y: 0.02, z: -0.46}, fog: 0, flatShading: false, playArea: 1, ground: 'hills', groundYScale: 3, groundTexture: 'none', groundColor: '#9e7b47', groundColor2: '#9e7b47', dressing: 'pyramids', dressingAmount: 7, dressingColor: '#9e7b47', dressingScale: 5, dressingVariance: { x: 30, y: 30, z: 30}, dressingUniformScale: true, grid: 'dots', dressingOnPlayArea: 0, gridColor: '#daa452', shadow: false},\r\n    'moon': {active: true, seed: 11, skyType: 'gradient', skyColor: '#000000', horizonColor: '#000000', lighting: 'distant', lightPosition: { x: 0.5, y: 1, z: 0}, fog: 0.8, flatShading: true, playArea: 1, ground: 'canyon', groundYScale: 9.76, groundTexture: 'walkernoise', groundColor: '#D1D1D1', groundColor2: '#494949', dressing: 'stones', dressingAmount: 500, dressingColor: '#494949', dressingScale: 0.06, dressingVariance: { x: 0.2, y: 0.1, z: 0.2}, dressingUniformScale: true, dressingOnPlayArea: 1, grid: 'none', gridColor: '#239893', shadow: false}\r\n  },\r\n\r\n  init: function () {\r\n    this.environmentData = {};\r\n\r\n    // renderer system for color correction\r\n    this.rendererSystem = this.el.sceneEl.systems.renderer;\r\n\r\n    // stage ground diameter (and sky radius)\r\n    this.STAGE_SIZE = this.data.stageSize;\r\n\r\n    // data for dressing meshes\r\n    this.assets = {\r\n      'arches': [\r\n        {\r\n          type: 'mesh',\r\n          vertices: [409,268,4,351,228,36,336,236,-57,-152,391,69,-135,358,88,-119,330,43,-20,358,-35,-153,357,-47,37,413,-26,-20,411,-14,-302,148,154,-339,121,-126,-389,200,-88,-477,193,-76,-314,346,-19,-314,306,-30,-250,296,-73,-267,237,-82,-212,303,-68,-245,200,-67,-223,304,108,-329,299,107,-289,350,76,-320,342,69,119,373,-39,38,370,8,113,367,52,492,202,-31,462,83,-104,447,71,-80,426,112,25,482,189,-7,222,372,6,121,402,41,87,382,67,221,346,55,559,93,-13,528,47,39,505,21,-111,528,54,-101,616,31,-53,442,256,-15,300,338,19,257,308,-79,408,256,-74,312,352,-26,384,297,-31,437,257,-47,-29,415,53,-232,377,59,-139,335,77,-132,344,2,-18,377,-37,-171,387,-28,-254,384,18,-651,-27,27,-435,-28,179,-345,149,165,-272,-28,23,-215,146,-2,-279,-29,-59,-211,145,-55,-337,-28,-128,-413,247,0,-293,363,24,-214,254,-36,-164,290,33,-284,150,94,-218,362,105,75,369,29,518,147,-63,447,190,-70,445,56,-105,391,185,-60,431,49,-33,459,83,26,470,162,42,130,390,53,167,341,-30,125,394,-45,239,368,-17,91,414,10,450,18,2,449,-27,-9,436,-28,-58,496,-27,-110,582,-28,-140,647,-27,-56,325,325,-45,-307,297,-56,-647,-28,-45,-188,310,-54,-264,197,113,-367,175,139,8,387,82,426,45,-55,114,359,-28,500,27,44,461,-29,13,-512,-27,-151,-152,376,-38,-490,-28,148,12,370,-28,442,160,42,465,194,32,381,183,-33,649,-27,-34,444,16,29,616,-28,25,417,267,-66,-132,352,-34,-322,-27,130,-271,86,-115,-635,-28,-121,-291,203,-99,176,405,-10,561,52,-93,371,305,9,311,237,-22,377,200,-81,-129,406,46,-154,371,99,-82,361,71,-21,354,26,-91,363,-27,-165,413,-12,-414,215,110,-238,127,26,-408,-28,-128,-674,-28,-94,-446,232,-39,-311,226,-90,-255,210,-61,-235,192,-11,-217,218,58,-269,299,124,-386,276,78,-399,281,42,15,373,58,16,393,75,549,107,-46,481,188,-68,409,120,-41,541,81,12,230,368,41,194,350,-50,224,361,-50,604,-28,-10,602,-27,35,486,56,-121,502,69,-120,457,-27,-110,226,317,-40,-584,-28,-124,439,-26,-30,467,-26,39,547,-27,-146,21,368,14,466,229,-29,578,-27,44,609,-27,-96,291,356,-15,290,306,34,255,321,28,231,311,-5,-251,386,50,-183,307,87,-152,307,24,-264,373,-12,-392,-27,190,-333,-28,84,-281,-27,54,-270,-28,-23,-308,-28,-101,-687,-27,-59,39,418,39,413,163,25,404,206,-90,54,400,-31,121,352,8,-454,41,148,-426,9,182,-564,115,3,-427,27,-107,-548,118,-32,-556,122,-53,-517,91,-101,-475,54,140,-461,52,-134,-558,119,-71,-434,286,59,-687,-31,52,-595,146,22,-670,-28,164,-537,166,122,-575,-28,217,-566,159,65,-470,152,136,-712,-29,102,-639,-29,211,-532,-30,181,-442,-30,-100],\r\n          faces: [76,104,162,1,176,103,103,76,1,2,119,73,73,105,2,2,118,152,45,161,46,46,109,45,3,120,49,49,68,3,3,121,139,139,48,3,4,122,94,94,121,4,6,123,124,9,175,81,10,169,111,10,67,92,88,43,146,11,131,114,11,128,183,13,130,15,90,184,174,90,182,184,130,184,63,14,130,63,15,130,14,16,131,12,15,168,53,18,91,17,131,16,17,65,133,132,65,132,91,67,134,166,166,92,67,20,135,92,20,166,4,4,121,20,22,135,68,25,102,96,25,157,102,69,138,157,69,157,25,39,150,71,71,141,39,28,150,149,149,72,28,142,176,105,36,140,27,27,143,36,32,115,81,32,144,161,161,80,32,77,35,144,34,26,77,78,179,96,145,152,78,178,79,145,80,146,79,147,140,36,143,108,36,143,37,148,74,95,154,154,83,74,72,149,151,151,95,72,38,150,156,40,147,106,70,140,40,40,116,70,42,162,0,35,163,162,43,145,146,46,117,41,47,158,27,48,139,175,122,138,94,157,138,123,52,178,102,52,102,6,52,124,7,7,100,52,53,125,8,57,93,181,56,169,181,59,127,58,60,173,61,62,128,11,11,112,62,65,91,167,65,167,66,126,93,21,22,68,49,72,95,29,142,29,74,74,82,142,75,107,97,75,97,103,76,97,37,104,143,31,78,152,164,78,164,179,79,178,8,97,155,159,107,98,155,83,98,82,154,95,84,39,116,86,86,156,39,87,160,116,24,145,96,162,104,0,105,118,2,43,177,119,44,177,43,91,51,167,44,88,109,46,161,117,3,68,121,3,48,120,4,166,50,50,122,4,5,123,122,123,138,122,110,124,51,170,10,111,110,91,7,7,124,110,8,125,9,9,81,8,186,12,188,92,135,10,11,114,112,64,63,137,13,15,89,89,53,100,64,168,14,14,168,15,89,100,16,16,12,89,100,18,16,17,91,132,112,19,61,18,7,91,19,17,132,133,127,59,133,59,61,136,21,22,134,127,133,20,92,166,121,135,20,158,31,27,21,135,22,23,137,136,24,102,178,178,145,24,25,179,69,26,94,138,27,140,70,27,70,141,150,177,71,28,177,150,29,142,73,73,119,29,142,82,30,30,176,142,107,75,82,31,143,27,33,81,175,31,41,104,115,79,8,32,33,144,80,115,32,33,175,139,35,162,42,77,139,34,163,26,179,163,179,164,78,96,145,177,29,119,108,143,148,148,37,159,97,159,37,74,83,82,38,149,150,156,150,39,40,106,87,87,116,40,140,147,40,161,144,42,42,117,161,41,0,104,41,117,0,0,117,42,164,118,163,1,163,118,118,176,1,118,105,176,152,118,164,43,152,145,43,119,2,71,109,141,47,41,158,44,71,177,45,109,88,45,88,146,46,47,109,141,47,27,167,50,166,49,120,165,139,121,94,5,122,50,123,51,124,157,6,102,157,123,6,100,8,178,5,167,51,6,124,52,100,178,52,53,168,125,125,165,120,54,125,168,9,48,175,120,9,125,93,10,135,181,101,56,57,169,10,59,172,61,67,170,171,67,171,127,58,127,171,129,186,113,60,61,172,61,173,112,62,112,173,174,189,129,165,64,23,64,137,23,165,22,49,64,54,168,17,114,131,17,112,114,66,133,65,19,132,133,19,133,61,134,133,66,166,134,66,166,66,167,93,135,21,68,135,121,23,136,22,94,34,139,25,96,179,26,138,69,69,179,26,30,103,176,116,141,70,39,141,116,73,142,105,143,76,37,26,35,77,103,97,76,77,144,33,33,139,77,38,151,149,80,161,45,80,45,146,81,115,8,107,155,97,82,98,107,95,151,84,38,156,85,86,116,160,96,102,24,72,29,28,29,95,74,75,30,82,108,147,36,88,44,43,91,110,51,170,67,10,11,183,131,64,14,63,89,15,53,100,7,18,112,17,19,127,134,67,136,126,21,158,41,31,33,32,81,115,80,79,177,28,29,43,2,152,71,44,109,47,46,41,141,109,47,167,5,50,123,5,51,100,53,8,125,54,165,9,120,48,93,57,10,59,58,172,174,185,189,165,54,64,165,23,22,94,26,34,30,75,103,143,104,76,26,163,35,38,85,151,192,182,191,183,128,201,12,13,89,181,169,57,186,153,113,188,183,99,184,182,63,185,13,189,180,181,93,186,99,153,189,186,129,185,184,130,186,13,12,187,93,126,193,199,194,194,196,193,200,187,195,187,197,195,187,126,197,197,190,194,190,136,137,190,196,194,63,182,192,63,192,196,192,198,196,191,182,55,193,196,198,194,199,197,195,197,199,136,197,126,190,137,63,190,63,196,197,136,190,192,191,198,201,99,183,90,55,182,181,180,101,185,130,13,186,188,99,186,189,13,187,180,93,200,101,187,183,188,131,184,185,174,180,187,101,16,18,17,12,131,188,35,42,144,163,1,162,76,162,1,79,146,145]\r\n        }\r\n      ],\r\n      'stones': [\r\n        {\r\n          type: 'mesh',\r\n          vertices: [-376,189,42,230,223,-310,353,162,-62,414,-23,-67,256,90,-475,24,85,-526,-418,-16,57,-432,66,-40,-199,151,-376,-155,49,467,-91,289,201,293,197,91,81,-17,-480,42,108,431,-359,-17,-250,383,-19,-243,194,-15,270,-272,180,293,-86,212,262,234,54,297,395,97,-302,-123,-21,-444,-416,-19,-123,-323,-18,267,-100,-16,429,-300,96,-361,163,-19,409,118,201,-431,-241,-18,391,-130,274,-309,306,-19,-399,-221,96,404],\r\n          faces: [31,18,17,0,17,18,3,20,2,18,11,10,29,27,8,27,29,1,0,18,10,10,29,0,16,19,26,11,2,1,20,30,4,20,3,15,30,12,4,4,12,5,5,27,4,4,27,20,21,25,5,7,8,25,22,7,14,7,25,14,23,28,31,0,7,17,24,26,9,31,28,9,8,27,5,2,20,1,13,19,18,10,11,1,19,13,26,3,11,19,19,16,3,11,3,2,11,18,19,20,15,30,29,10,1,25,21,14,8,5,25,5,12,21,6,7,22,7,6,23,8,0,29,8,7,0,23,31,7,13,31,9,18,31,13,9,28,24,26,13,9,27,1,20,7,31,17]\r\n        },\r\n        {\r\n          type: 'mesh',\r\n          vertices: [-217,34,-153,198,90,20,212,85,169,-131,93,171,197,113,30,173,121,164,315,29,-16,219,24,189,282,50,-102,232,38,-181,-195,-9,-166,-156,30,-207,-51,-9,-231,-180,91,-173,-19,73,-204,-280,23,96,-242,100,107,3,158,-82,109,88,221,275,-10,-40,236,-10,-135,-178,49,184,-1,-10,-243,265,-11,109,-12,-9,237,-36,46,251,-233,86,-81,93,77,-171,-163,133,69,18,16,263,296,44,93,131,-12,-226,-89,-10,-201,-273,-10,-51,-240,-9,110,190,-12,192,-253,-11,-92,42,43,-258,-115,-11,238,168,99,-88,-285,-10,24,71,124,-158,298,-10,10,116,150,-24,-282,44,39],\r\n          faces: [44,16,26,13,26,16,0,26,13,27,14,41,4,5,1,7,30,2,28,5,43,41,39,27,17,43,41,43,4,39,13,28,17,17,41,13,28,43,17,24,29,38,29,35,7,18,25,29,5,18,2,18,5,3,30,42,6,30,35,23,19,20,8,8,20,9,9,39,8,1,30,8,31,37,9,11,14,37,14,27,37,32,11,12,11,37,12,11,0,13,33,40,44,44,26,33,33,0,36,34,38,15,44,40,15,21,3,16,27,39,9,2,30,1,21,25,3,16,3,28,28,3,5,4,43,5,41,43,39,13,16,28,25,21,38,38,29,25,7,18,29,29,24,35,18,7,2,18,3,25,30,23,42,30,7,35,8,30,6,6,19,8,6,42,19,8,39,1,37,31,22,27,9,37,9,20,31,10,11,32,11,10,0,12,37,22,14,13,41,14,11,13,33,26,0,36,0,10,21,44,15,16,44,21,15,40,34,38,21,15,4,1,39,5,2,1]\r\n        },\r\n        {\r\n          type: 'mesh',\r\n          vertices: [-101,102,57,99,35,102,40,72,80,59,14,-168,-186,22,45,-176,25,-30,66,-7,146,153,-7,53,-110,47,-96,-90,-8,-146,150,-7,-12,-200,-7,8,-173,-7,-55,55,46,-60,125,-7,110,136,30,-10,-149,58,68,-15,82,-71,98,-7,-86,-34,-6,-194,-33,-7,171,-36,65,137,38,-8,-192,-103,-9,147,-12,62,-152],\r\n          faces: [2,17,0,17,8,0,17,24,8,19,24,22,5,11,4,2,13,17,17,13,24,21,23,20,1,2,21,7,15,1,7,10,15,5,9,12,15,18,13,0,5,16,0,8,5,1,15,2,10,18,15,3,13,18,24,3,22,11,23,4,4,16,5,16,4,23,24,13,3,15,13,2,6,1,21,6,21,20,6,14,1,2,0,21,1,14,7,3,18,22,8,24,19,8,19,9,12,11,5,5,8,9,16,23,21,16,21,0]\r\n        },\r\n        {\r\n          type: 'mesh',\r\n          vertices: [86,55,-18,58,38,73,97,-12,79,135,7,10,-93,-11,-72,-133,5,33,13,68,-32,94,-11,-57,-90,52,53,-24,-11,-106,-13,-10,104,-75,49,-69,-12,18,114,49,-12,-96,-46,-11,-85,-119,-11,-26,48,5,-111,-58,-11,105,-117,-12,52,-5,35,-93,123,-11,7],\r\n          faces: [5,8,11,2,3,1,8,1,6,11,8,6,6,19,11,10,12,17,20,7,3,3,7,16,16,0,3,16,9,19,14,4,9,15,18,5,5,11,15,18,17,5,19,0,16,1,3,0,0,6,1,19,6,0,12,8,17,2,1,12,12,10,2,1,8,12,3,2,20,16,13,9,16,7,13,19,4,11,15,11,4,17,8,5,9,4,19]\r\n        }\r\n      ],\r\n      'torii': [\r\n        {\r\n          type: 'mesh',\r\n          mirror: true,\r\n          flatShading: true,\r\n          vertices: [692,966,-52,661,834,-52,692,966,52,661,834,52,0,894,-52,0,776,-52,0,894,52,0,776,52,518,935,52,345,913,52,170,899,52,162,779,52,328,790,52,494,808,52,170,899,-52,345,913,-52,518,935,-52,494,808,-52,328,790,-52,162,779,-52,0,618,16,0,697,16,0,618,-16,0,697,-16,586,618,16,586,697,16,586,618,-16,586,697,-16,331,-29,-75,331,766,-52,369,-29,-65,357,766,-45,396,-29,-37,377,766,-26,406,-29,0,384,766,0,396,-29,37,377,766,26,369,-29,65,357,766,45,331,-29,75,331,766,52,294,-29,65,305,766,45,267,-29,37,286,766,26,257,-29,0,279,766,0,267,-29,-37,286,766,-26,294,-29,-65,305,766,-45,0,777,85,0,681,33,333,762,-75,333,806,-75,371,762,-65,371,806,-65,398,762,-37,398,806,-37,408,762,0,408,806,0,398,762,37,398,806,37,371,762,65,371,806,65,333,762,75,333,806,75,296,762,65,296,806,65,268,762,37,268,806,37,258,762,0,258,806,0,268,762,-37,268,806,-37,296,762,-65,296,806,-65,0,681,-33,0,777,-85,52,681,33,52,777,85,52,681,-33,52,777,-85],\r\n          faces: [4,10,14,1,13,17,11,6,7,0,3,1,16,1,17,4,19,5,14,18,19,15,17,18,3,8,13,13,9,12,12,10,11,19,7,5,19,12,11,18,13,12,16,2,0,15,8,16,14,9,15,23,26,22,27,24,26,25,20,24,26,20,22,23,25,27,29,30,28,31,32,30,33,34,32,35,36,34,37,38,36,39,40,38,41,42,40,43,44,42,45,46,44,47,48,46,49,50,48,51,28,50,55,56,54,57,58,56,59,60,58,61,62,60,63,64,62,79,81,83,65,66,64,82,53,78,67,68,66,81,53,80,69,70,68,83,80,82,71,72,70,79,82,78,73,74,72,75,63,59,75,76,74,77,54,76,60,68,76,4,6,10,1,3,13,11,10,6,0,2,3,16,0,1,4,14,19,14,15,18,15,16,17,3,2,8,13,8,9,12,9,10,19,11,7,19,18,12,18,17,13,16,8,2,15,9,8,14,10,9,23,27,26,27,25,24,25,21,20,26,24,20,23,21,25,29,31,30,31,33,32,33,35,34,35,37,36,37,39,38,39,41,40,41,43,42,43,45,44,45,47,46,47,49,48,49,51,50,51,29,28,55,57,56,57,59,58,59,61,60,61,63,62,63,65,64,79,52,81,65,67,66,82,80,53,67,69,68,81,52,53,69,71,70,83,81,80,71,73,72,79,83,82,73,75,74,59,57,55,55,77,75,75,73,71,71,69,75,67,65,63,63,61,59,59,55,75,75,69,67,67,63,75,75,77,76,77,55,54,76,54,56,56,58,76,60,62,68,64,66,68,68,70,72,72,74,68,76,58,60,62,64,68,68,74,76]\r\n        }\r\n      ],\r\n      'hexagons': [\r\n        {type: 'extrude', vertices: [-0.198, -0.302, 0.197, -0.3, 0.372, 0, 0.199, 0.298, -0.202, 0.298, -0.368, 0] }\r\n      ],\r\n      'towers': [\r\n        {type: 'extrude', vertices:  [-0.054, -0.178, -0.007, -0.182, 0.069, -0.027, 0.189, 0.079, 0.178, 0.124, -0.007, 0.097, -0.145, 0.182, -0.178, 0.144, -0.079, -0.021]},\r\n        {type: 'lathe', segments: 4, vertices: [0.004, 0.02, 0.012, 0.092, 0.042, 0.166, 0.067, 0.55, 0.101, 0.594, 0.105, 0.838, 0.193, 0.934, 0.18, 0.994]},\r\n        {type: 'lathe', segments: 5, vertices: [0.069, 0.216, 0.067, 0.562, 0.126, 0.562, 0.128, 0.774, 0.191, 0.774, 0.193, 0.986]}\r\n      ],\r\n      'trees': [\r\n        {type: 'lathe', noise: 0.015, segments: 6, vertices: [0.000001, 0.826, 0.054, 0.832, 0.105, 0.854, 0.136, 0.9, 0.136, 0.958, 0.118, 0.994]},\r\n        {type: 'lathe', noise: 0.015, segments: 14, vertices:  [0.000001, 0.01, 0.069, 0.022, 0.13, 0.068, 0.178, 0.18, 0.189, 0.32, 0.191, 0.59, 0.193, 0.75, 0.138, 0.79, 0.018, 0.808, 0.018, 0.996]},\r\n        {type: 'lathe', noise: 0.015, segments: 14, vertices: [0.000001, 0.436, 0.126, 0.46, 0.201, 0.57, 0.219, 0.72, 0.154, 0.846, 0.028, 0.884, 0.034, 0.996]}\r\n      ],\r\n      'apparatus': [\r\n        {type: 'lathe', segments: 10, vertices: [0.000001, 0.23, 0.042, 0.23, 0.069, 0.36, 0.038, 0.362, 0.038, 0.372, 0.06, 0.372, 0.073, 0.572, 0.024, 0.572, 0.024, 0.67, 0.069, 0.67, 0.075, 0.722, 0.097, 0.724, 0.105, 0.852, 0.083, 0.902, 0.065, 0.902, 0.065, 0.924, 0.128, 0.924, 0.146, 0.996]},\r\n        {type: 'lathe', segments: 16, vertices: [0.000001, 0.232, 0.229, 0.182, 0.486, 0.07, 0.356, 0.182, 0.213, 0.242, 0.154, 0.242, 0.144, 0.262, 0.178, 0.262, 0.126, 0.314, 0.04, 0.328, 0.038, 0.374, 0.058, 0.374, 0.071, 0.408, 0.026, 0.406, 0.03, 0.42, 0.091, 0.418, 0.034, 0.496, 0.01, 0.498, 0.03, 0.506, 0.014, 0.998]},\r\n      ],\r\n      'mushrooms': [\r\n        {type: 'lathe', noise: 0.02, segments: 14, vertices:  [0.000001, 0.006, 0.13, 0.018, 0.341, 0.084, 0.437, 0.144, 0.492, 0.234, 0.484, 0.246, 0.276, 0.232, 0.107, 0.284, 0.046, 0.346, 0.062, 0.852, 0.097, 0.956, 0.166, 0.998]},\r\n        {type: 'lathe', noise: 0.02, segments: 10, vertices:  [0.000001, 0.562, 0.091, 0.572, 0.172, 0.61, 0.223, 0.666, 0.256, 0.74, 0.258, 0.806, 0.246, 0.824, 0.062, 0.826, 0.065, 0.948, 0.097, 0.998]},\r\n        {type: 'lathe', noise: 0.02, segments: 10, vertices:  [0.000001, 0.768, 0.099, 0.772, 0.219, 0.802, 0.306, 0.844, 0.352, 0.886, 0.352, 0.908, 0.118, 0.904, 0.107, 0.93, 0.115, 0.966, 0.14, 0.996]}\r\n      ]\r\n    };\r\n\r\n    // scale down dressing meshes (coordinates were saved in integers for better compression)\r\n    for (var i in this.assets){\r\n      for (var j = 0; j < this.assets[i].length; j++) {\r\n        var asset = this.assets[i][j];\r\n        if (asset.type != 'mesh') continue;\r\n        for (var v = 0, len = asset.vertices.length; v < len; v++) {\r\n          asset.vertices[v] /= 1000.0;\r\n        }\r\n      }\r\n    }\r\n\r\n    // save current scene fog\r\n    this.userFog = this.el.sceneEl.getAttribute('fog');\r\n\r\n    // create sky\r\n    this.sky = document.createElement('a-sky');\r\n    this.sky.setAttribute('radius', this.STAGE_SIZE);\r\n    this.sky.setAttribute('theta-length', 110);\r\n    this.sky.classList.add('environment');\r\n\r\n    // stars are created when needed\r\n    this.stars = null;\r\n\r\n    // create ground\r\n    this.ground = document.createElement('a-entity');\r\n    this.ground.setAttribute('rotation', '-90 0 0');\r\n    this.ground.classList.add('environmentGround');\r\n    this.ground.classList.add('environment');\r\n    this.groundCanvas = null;\r\n    this.groundTexture = null;\r\n    this.groundMaterial = null;\r\n    this.groundGeometry = null;\r\n\r\n    this.dressing = document.createElement('a-entity');\r\n    this.dressing.classList.add('environmentDressing');\r\n    this.dressing.classList.add('environment');\r\n\r\n    this.gridCanvas = null;\r\n    this.gridTexture = null;\r\n\r\n    // create lights (one ambient hemisphere light, and one directional for the sun)\r\n    this.hemilight = document.createElement('a-entity');\r\n    this.hemilight.classList.add('environment');\r\n    this.hemilight.setAttribute('position', '0 50 0');\r\n    this.hemilight.setAttribute('light', {\r\n      type: 'hemisphere',\r\n      color: '#CEE4F0',\r\n      intensity: 1.256\r\n    });\r\n    this.sunlight = document.createElement('a-entity');\r\n    this.sunlight.classList.add('environment');\r\n    this.sunlight.setAttribute('position', this.data.lightPosition);\r\n    this.sunlight.setAttribute('light', {intensity: 1.884});\r\n\r\n    // add everything to the scene\r\n    this.el.appendChild(this.hemilight);\r\n    this.el.appendChild(this.sunlight);\r\n    this.el.appendChild(this.ground);\r\n    this.el.appendChild(this.dressing);\r\n    this.el.appendChild(this.sky);\r\n  },\r\n\r\n  // returns a fog color from a specific sky type and sun height\r\n  getFogColor: function (skyType, sunHeight) {\r\n\r\n    // Note: linear operations are performed on the sRGB fog color\r\n    //       so tell Three that it's NoColorSpace and let it convert\r\n    //       to the working color space after all computations are done\r\n    var fogColor;\r\n    if (skyType == 'color' || skyType == 'none'){\r\n      fogColor = new THREE.Color().setStyle(this.environmentData.skyColor, THREE.NoColorSpace);\r\n    }\r\n    else if (skyType == 'gradient'){\r\n      fogColor = new THREE.Color().setStyle(this.environmentData.horizonColor, THREE.NoColorSpace);\r\n    }\r\n    else if (skyType == 'atmosphere')\r\n    {\r\n      var fogRatios = [        1,       0.5,      0.22,       0.1,      0.05,     0];\r\n      var fogColors = ['#C0CDCF', '#81ADC5', '#525e62', '#2a2d2d', '#141616', '#000'];\r\n\r\n      if (sunHeight <= 0) return '#000';\r\n\r\n      sunHeight = Math.min(1, sunHeight);\r\n\r\n      for (var i = 0; i < fogRatios.length; i++){\r\n        if (sunHeight > fogRatios[i]) {\r\n          var c1 = new THREE.Color().setStyle(fogColors[i - 1], THREE.NoColorSpace);\r\n          var c2 = new THREE.Color().setStyle(fogColors[i], THREE.NoColorSpace);\r\n          var a = (sunHeight - fogRatios[i]) / (fogRatios[i - 1] - fogRatios[i]);\r\n          c2.lerp(c1, a);\r\n          fogColor = c2;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // dim down the color\r\n    fogColor.multiplyScalar(0.9);\r\n    // mix it a bit with ground color\r\n    fogColor.lerp(new THREE.Color().setStyle(this.data.groundColor, THREE.NoColorSpace), 0.3);\r\n\r\n    // convert the resulting color to the working color space\r\n    fogColor.setRGB(fogColor.r, fogColor.g, fogColor.b, THREE.SRGBColorSpace);\r\n\r\n    return '#' + fogColor.getHexString();\r\n  },\r\n\r\n  update: function (oldDataNonPreset) {\r\n    var oldData;\r\n\r\n    if (!this.data.preset) {\r\n      oldData = oldDataNonPreset;\r\n      this.environmentData = this.data;\r\n    } else {\r\n      oldData = AFRAME.utils.clone(this.environmentData);\r\n      this.environmentData = {};\r\n      Object.assign(this.environmentData, this.data);\r\n      Object.assign(this.environmentData, this.presets[this.data.preset]);\r\n      Object.assign(this.environmentData, this.el.components.environment.attrValue);\r\n      console.log(this.environmentData);\r\n    }\r\n\r\n    var skyType = this.environmentData.skyType;\r\n    var sunPos = new THREE.Vector3(this.environmentData.lightPosition.x, this.environmentData.lightPosition.y, this.environmentData.lightPosition.z);\r\n    sunPos.normalize();\r\n\r\n    // update light colors and intensities\r\n    if (this.sunlight) {\r\n      this.sunlight.setAttribute('position', this.environmentData.lightPosition);\r\n      if (skyType != 'atmosphere') {\r\n        // dim down the sky color for the light\r\n        var skycol = new THREE.Color().setStyle(this.environmentData.skyColor, THREE.NoColorSpace);\r\n        skycol.setRGB(\r\n          (skycol.r + 1.0) / 2.0,\r\n          (skycol.g + 1.0) / 2.0,\r\n          (skycol.b + 1.0) / 2.0,\r\n          THREE.SRGBColorSpace\r\n        );\r\n        this.hemilight.setAttribute('light', {\r\n          'color': '#' + skycol.getHexString(),\r\n          'intensity': 1.884\r\n        });\r\n        this.sunlight.setAttribute('light', {'intensity': 1.884});\r\n      }\r\n      else {\r\n        this.hemilight.setAttribute('light', {\r\n          'color': '#CEE4F0',\r\n          'intensity': 0.314 + sunPos.y * 1.57\r\n        });\r\n        this.sunlight.setAttribute('light', {'intensity': 0.314 + sunPos.y * 1.57});\r\n      }\r\n\r\n      this.sunlight.setAttribute('light', {\r\n        castShadow: this.environmentData.shadow,\r\n        shadowCameraLeft: -this.environmentData.shadowSize,\r\n        shadowCameraBottom: -this.environmentData.shadowSize,\r\n        shadowCameraRight: this.environmentData.shadowSize,\r\n        shadowCameraTop: this.environmentData.shadowSize\r\n      });\r\n    }\r\n\r\n    var updateStageSize = this.environmentData.stageSize !== oldData.stageSize;\r\n\r\n    if (updateStageSize) {\r\n      this.STAGE_SIZE = this.data.stageSize;\r\n      this.sky.setAttribute('radius', this.STAGE_SIZE);\r\n    }\r\n    // update sky colors\r\n    if (skyType !== oldData.skyType ||\r\n      this.environmentData.skyColor != oldData.skyColor ||\r\n      this.environmentData.horizonColor != oldData.horizonColor) {\r\n\r\n      var mat = {};\r\n      mat.shader = {'none': 'flat', 'color': 'flat', 'gradient': 'gradientshader', 'atmosphere': 'skyshader'}[skyType];\r\n      if (this.stars) {\r\n        this.stars.setAttribute('visible', skyType == 'atmosphere');\r\n      }\r\n      if (skyType == 'color') {\r\n        mat.color = this.environmentData.skyColor;\r\n        mat.fog = false;\r\n      }\r\n      else if (skyType == 'gradient') {\r\n        // Gradient shader doesn't encode fragments, so pass in colors as NoColorSpace\r\n        mat.topColor = new THREE.Color().setStyle(this.environmentData.skyColor, THREE.NoColorSpace);\r\n        mat.bottomColor = new THREE.Color().setStyle(this.environmentData.horizonColor, THREE.NoColorSpace);\r\n      }\r\n\r\n      this.sky.setAttribute('material', mat);\r\n    }\r\n\r\n    // set atmosphere sun position and stars\r\n    if (skyType == 'atmosphere') {\r\n      this.sky.setAttribute('material', {'sunPosition': sunPos});\r\n      this.setStars((1 - Math.max(0, (sunPos.y + 0.08) * 8)) * 2000 );\r\n    }\r\n\r\n    // set fog color\r\n    if (this.environmentData.fog > 0) {\r\n      this.el.sceneEl.setAttribute('fog', {\r\n        color: this.getFogColor(skyType, sunPos.y),\r\n        far: (1.01 - this.environmentData.fog) * this.STAGE_SIZE * 2\r\n      });\r\n    }\r\n    else {\r\n      this.el.sceneEl.removeAttribute('fog');\r\n    }\r\n\r\n    // scene lights\r\n    this.sunlight.setAttribute('light', {type: this.environmentData.lighting == 'point' ? 'point' : 'directional'});\r\n    this.sunlight.setAttribute('visible', this.environmentData.lighting !== 'none');\r\n    this.hemilight.setAttribute('visible', this.environmentData.lighting !== 'none');\r\n\r\n    // check if ground geometry needs to be calculated\r\n    var updateGroundGeometry =\r\n      !this.groundGeometry ||\r\n      this.environmentData.seed != oldData.seed ||\r\n      this.environmentData.ground != oldData.ground ||\r\n      this.environmentData.playArea != oldData.playArea ||\r\n      this.environmentData.flatShading != oldData.flatShading ||\r\n      this.environmentData.groundDensity != oldData.groundDensity ||\r\n      this.environmentData.groundFrequency != oldData.groundFrequency ||\r\n      updateStageSize;\r\n\r\n    // check if any parameter of the ground was changed, and update it\r\n    if (updateGroundGeometry ||\r\n        this.environmentData.groundColor != oldData.groundColor ||\r\n        this.environmentData.groundColor2 != oldData.groundColor2 ||\r\n        this.environmentData.groundYScale != oldData.groundYScale ||\r\n        this.environmentData.groundTexture != oldData.groundTexture ||\r\n        this.environmentData.gridColor != oldData.gridColor ||\r\n        this.environmentData.grid != oldData.grid\r\n        )\r\n    {\r\n      this.updateGround(updateGroundGeometry);\r\n      // set bounce light color to ground color\r\n      if (this.hemilight) this.hemilight.setAttribute('light', {'groundColor': this.environmentData.groundColor});\r\n    }\r\n\r\n    // update dressing\r\n    if (this.environmentData.seed != oldData.seed ||\r\n        this.environmentData.dressingOnPlayArea != oldData.dressingOnPlayArea ||\r\n        this.environmentData.dressing != oldData.dressing ||\r\n        this.environmentData.flatShading != oldData.flatShading ||\r\n        this.environmentData.dressingAmount != oldData.dressingAmount ||\r\n        this.environmentData.dressingScale != oldData.dressingScale ||\r\n        this.environmentData.dressingColor != oldData.dressingColor  ||\r\n        this.environmentData.dressingVariance.x != oldData.dressingVariance.x ||\r\n        this.environmentData.dressingVariance.y != oldData.dressingVariance.y ||\r\n        this.environmentData.dressingVariance.z != oldData.dressingVariance.z ||\r\n        this.environmentData.dressingUniformScale != oldData.dressingUniformScale ||\r\n        updateStageSize\r\n      ) {\r\n      this.updateDressing();\r\n    }\r\n\r\n    this.sky.setAttribute('visible', skyType !== 'none');\r\n\r\n    this.el.setAttribute('visible', this.environmentData.active);\r\n    if (!this.environmentData.active) {\r\n      if (this.userFog) {\r\n        this.el.sceneEl.setAttribute('fog', this.userFog);\r\n      }\r\n      else {\r\n        this.el.sceneEl.removeAttribute('fog');\r\n      }\r\n    }\r\n\r\n    // dump current component settings to console\r\n    this.dumpParametersDiff();\r\n  },\r\n\r\n  remove: function() {\r\n    if (this.userFog) {\r\n      this.el.sceneEl.setAttribute('fog', this.userFog);\r\n    }\r\n    else {\r\n      this.el.sceneEl.removeAttribute('fog');\r\n    }\r\n    this.el.removeChild(this.hemilight);\r\n    this.el.removeChild(this.sunlight);\r\n    if (this.groundTexture) this.groundTexture.dispose();\r\n    if (this.gridTexture) this.gridTexture.dispose();\r\n    if (this.groundMaterial) this.groundMaterial.dispose();\r\n    if (this.groundGeometry) this.groundGeometry.dispose();\r\n    this.el.removeChild(this.ground);\r\n    var dressingMesh = this.dressing.getObject3D('mesh');\r\n    if (dressingMesh && dressingMesh.children.length > 0) {\r\n      dressingMesh.children[0].material.dispose();\r\n      dressingMesh.children[0].geometry.dispose();\r\n    }\r\n    this.el.removeChild(this.dressing);\r\n    this.el.removeChild(this.sky);\r\n    this.removeStars();\r\n  },\r\n\r\n  // logs current parameters to console, for saving to a preset\r\n  logPreset: function () {\r\n    var str = '{';\r\n    for (var i in this.schema){\r\n      if (i == 'preset') continue;\r\n      str += i + ': ';\r\n      var type = this.schema[i].type;\r\n      if (type == 'vec3') {\r\n        str += '{ x: ' + this.environmentData[i].x + ', y: ' + this.environmentData[i].y + ', z: ' + this.environmentData[i].z + '}';\r\n      }\r\n      else if (type == 'string' || type == 'color') {\r\n        str += '\"' + this.environmentData[i] + '\"';\r\n      }\r\n      else {\r\n        str += this.environmentData[i];\r\n      }\r\n      str += ', ';\r\n    }\r\n    str += '}';\r\n    console.log(str);\r\n  },\r\n\r\n  // dumps current component settings to console.\r\n  dumpParametersDiff: function () {\r\n\r\n    // trim number to 3 decimals\r\n    function dec3 (v) {\r\n      return Math.floor(v * 1000) / 1000;\r\n    }\r\n\r\n    var params = [];\r\n    var usingPreset = this.data.preset != 'none' ? this.presets[this.data.preset] : false;\r\n\r\n    if (usingPreset) {\r\n      params.push('preset: ' + this.data.preset);\r\n    }\r\n\r\n    for (var i in this.schema) {\r\n      if (i == 'preset' || (usingPreset && usingPreset[i] === undefined)) {\r\n        continue;\r\n      }\r\n      var def = usingPreset ? usingPreset[i] : this.schema[i].default;\r\n      var data = this.environmentData[i];\r\n      var type = this.schema[i].type;\r\n      if (type == 'vec3') {\r\n        var coords = def;\r\n        if (typeof(def) == 'string') {\r\n          def = def.split(' ');\r\n          coords = {x: def[0], y: def[1], z: def[2]};\r\n        }\r\n        if (dec3(coords.x) != dec3(data.x) || dec3(coords.y) != dec3(data.y) || dec3(coords.z) != dec3(data.z)) {\r\n          params.push(i + ': ' + dec3(data.x) + ' ' + dec3(data.y) + ' ' + dec3(data.z));\r\n        }\r\n      }\r\n      else {\r\n        if (def != data) {\r\n          if (this.schema[i].type == 'number') {\r\n            data = dec3(data);\r\n          }\r\n          params.push(i + ': ' + data);\r\n        }\r\n      }\r\n    }\r\n    console.log('%c' + params.join('; '), 'color: #f48;font-weight:bold');\r\n  },\r\n\r\n  // Custom Math.random() with seed. Given this.environmentData.seed and x, it always returns the same \"random\" number\r\n  random: function (x) {\r\n    return parseFloat('0.' + Math.sin(this.environmentData.seed * 9999 * x).toString().substr(7));\r\n  },\r\n\r\n\r\n  // updates ground attributes, and geometry if required\r\n  updateGround: function (updateGeometry) {\r\n\r\n    var resolution = this.environmentData.groundDensity; // number of divisions of the ground mesh\r\n\r\n    if (updateGeometry) {\r\n      var visibleground = this.environmentData.ground != 'none';\r\n      this.ground.setAttribute('visible', visibleground);\r\n      if (!visibleground) {\r\n        return;\r\n      }\r\n\r\n      if (!this.groundGeometry) {\r\n        this.groundGeometry = new THREE.PlaneGeometry(this.STAGE_SIZE + 2, this.STAGE_SIZE + 2, resolution - 1, resolution - 1);\r\n      }\r\n      var perlin = new PerlinNoise(this.environmentData.seed);\r\n      var verts = this.groundGeometry.attributes.position.array;\r\n      var numVerts = verts.length;\r\n      var frequency = this.environmentData.groundFrequency;\r\n      var inc = frequency / resolution;\r\n      var x = 0;\r\n      var y = 0;\r\n\r\n      for (var i = 2; i < numVerts; i+=3) {\r\n        if (this.environmentData.ground == 'flat') {\r\n          verts[i] = 0;\r\n          continue;\r\n        }\r\n\r\n        var h;\r\n        switch (this.environmentData.ground) {\r\n          case 'hills': {\r\n            h = Math.max(0, perlin.noise(x, y, 0));\r\n            break;\r\n          }\r\n          case 'canyon': {\r\n            h = 0.2 + perlin.noise(x, y, 0) * 0.8;\r\n            h = Math.min(1, Math.pow(h, 2) * 10);\r\n            break;\r\n          }\r\n          case 'spikes': {\r\n            h = this.random(i) < 0.02 ? this.random(i + 1) : 0;\r\n            break;\r\n          }\r\n          case 'noise': {\r\n            h = this.random(i) < 0.35 ? this.random(i + 1) : 0;\r\n            break;\r\n          }\r\n        }\r\n\r\n        h += this.random(i + 2) * 0.1; // add some randomness\r\n\r\n        // flat ground in the center\r\n        var xx = x * 2 / frequency - 1;\r\n        var yy = y * 2 / frequency - 1;\r\n        var pa = this.environmentData.playArea;\r\n        xx = Math.max(0, Math.min(1, (Math.abs(xx) - (pa - 0.9)) * (1 / pa) ));\r\n        yy = Math.max(0, Math.min(1, (Math.abs(yy) - (pa - 0.9)) * (1 / pa) ));\r\n        h *= xx > yy ? xx : yy;\r\n        if (h < 0.01) h = 0; // stick to the floor\r\n\r\n        // set height\r\n        verts[i] = h;\r\n\r\n        // calculate next x,y ground coordinates\r\n        x += inc;\r\n        if (x >= frequency) {\r\n          x = 0;\r\n          y += inc;\r\n        }\r\n      }\r\n\r\n      this.groundGeometry.computeVertexNormals();\r\n\r\n      this.groundGeometry.attributes.position.needsUpdate = true;\r\n      this.groundGeometry.attributes.normal.needsUpdate = true;\r\n    }\r\n\r\n    // apply Y scale. There's no need to recalculate the geometry for this. Just change scale\r\n    this.ground.setAttribute('scale', {z: this.environmentData.groundYScale});\r\n\r\n    // update ground, playarea and grid textures.\r\n    var groundResolution = 2048;\r\n    var texMeters = 20; // ground texture of 20 x 20 meters\r\n    var texRepeat = this.STAGE_SIZE / texMeters;\r\n\r\n    if (!this.groundCanvas || this.groundCanvas.width != groundResolution) {\r\n      this.gridCanvas = document.createElement('canvas');\r\n      this.gridCanvas.width = groundResolution;\r\n      this.gridCanvas.height = groundResolution;\r\n      this.gridTexture = new THREE.Texture(this.gridCanvas);\r\n      this.gridTexture.wrapS = THREE.RepeatWrapping;\r\n      this.gridTexture.wrapT = THREE.RepeatWrapping;\r\n      this.gridTexture.repeat.set(texRepeat, texRepeat);\r\n      this.gridTexture.anisotropy = 4;\r\n      this.rendererSystem.applyColorCorrection(this.gridTexture);\r\n\r\n      this.groundCanvas = document.createElement('canvas');\r\n      this.groundCanvas.width = groundResolution;\r\n      this.groundCanvas.height = groundResolution;\r\n      this.groundTexture = new THREE.Texture(this.groundCanvas);\r\n      this.groundTexture.wrapS = THREE.RepeatWrapping;\r\n      this.groundTexture.wrapT = THREE.RepeatWrapping;\r\n      this.groundTexture.repeat.set(texRepeat, texRepeat);\r\n      this.groundTexture.anisotropy = 4;\r\n      this.rendererSystem.applyColorCorrection(this.groundTexture);\r\n\r\n      // ground material diffuse map is the regular ground texture and the grid texture\r\n      // is used in the emissive map. This way, the grid is always equally visible, even at night.\r\n      this.groundMaterialProps = {\r\n        map: this.groundTexture,\r\n        emissive: new THREE.Color(0xFFFFFF),\r\n        emissiveMap: this.gridTexture\r\n      };\r\n\r\n      this.groundMaterialProps.flatShading = this.environmentData.flatShading;\r\n\r\n      this.groundMaterial = new THREE.MeshLambertMaterial(this.groundMaterialProps);\r\n    }\r\n\r\n    var groundctx = this.groundCanvas.getContext('2d');\r\n    var gridctx = this.gridCanvas.getContext('2d');\r\n\r\n    this.drawTexture(groundctx, groundResolution, texMeters);\r\n\r\n    gridctx.fillStyle = '#000000';\r\n    gridctx.fillRect(0, 0, groundResolution, groundResolution);\r\n    this.drawGrid(gridctx, groundResolution, texMeters);\r\n\r\n    this.groundTexture.needsUpdate = true;\r\n    this.gridTexture.needsUpdate = true;\r\n\r\n    if (updateGeometry) {\r\n      var mesh = new THREE.Mesh(this.groundGeometry, this.groundMaterial);\r\n      this.ground.setObject3D('mesh', mesh);\r\n    }\r\n    else {\r\n      this.ground.getObject3D('mesh').material = this.groundMaterial;\r\n    }\r\n\r\n    this.ground.setAttribute('shadow', {\r\n      cast: false,\r\n      receive: this.environmentData.shadow\r\n    });\r\n  },\r\n\r\n  // draw grid to a canvas context\r\n  drawGrid: function (ctx, size, texMeters) {\r\n\r\n    if (this.environmentData.grid == 'none') return;\r\n\r\n    // one grid feature each 2 meters\r\n\r\n    var num = Math.floor(texMeters / 2);\r\n    var step = size / (texMeters / 2); // 2 meters == <step> pixels\r\n    var i, j, ii;\r\n\r\n    ctx.fillStyle = this.environmentData.gridColor;\r\n\r\n    switch (this.environmentData.grid) {\r\n      case '1x1':\r\n      case '2x2': {\r\n        if (this.environmentData.grid == '1x1') {\r\n          num = num * 2;\r\n          step = size / texMeters;\r\n        }\r\n        for (i = 0; i < num; i++) {\r\n          ii = Math.floor(i * step);\r\n          ctx.fillRect(0, ii, size, 1);\r\n          ctx.fillRect(ii, 0, 1, size);\r\n        }\r\n        break;\r\n      }\r\n      case 'crosses': {\r\n        var l = Math.floor(step / 20);\r\n        for (i = 0; i < num + 1; i++) {\r\n          ii = Math.floor(i * step);\r\n          for (j = 0; j < num + 1; j++) {\r\n            var jj = Math.floor(-l + j * step);\r\n            ctx.fillRect(jj, ii, l * 2, 1);\r\n            ctx.fillRect(ii, jj, 1, l * 2);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'dots': {\r\n        for (i = 0; i < num + 1; i++) {\r\n          for (j = 0; j < num + 1; j++) {\r\n            ctx.beginPath(); ctx.arc(Math.floor(j * step), Math.floor(i * step), 4, 0, Math.PI * 2); ctx.fill();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'xlines': {\r\n        for (i = 0; i < num; i++) {\r\n          ctx.fillRect(Math.floor(i * step), 0, 1, size);\r\n        }\r\n        break;\r\n      }\r\n      case 'ylines': {\r\n        for (i = 0; i < num; i++) {\r\n          ctx.fillRect(0, Math.floor(i * step), size, 1);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  // draw ground texture to a canvas context\r\n  drawTexture: function(ctx, size, texMeters) {\r\n    // fill all with ground Color\r\n    ctx.fillStyle = this.environmentData.groundColor;\r\n    ctx.fillRect(0, 0, size, size);\r\n\r\n    var i, col, col1, col2, im, imdata, numpixels;\r\n\r\n    if (this.environmentData.groundTexture == 'none') return;\r\n    switch(this.environmentData.groundTexture) {\r\n      case 'checkerboard': {\r\n        ctx.fillStyle = this.environmentData.groundColor2;\r\n        var num = Math.floor(texMeters / 2);\r\n        var step = size / (texMeters / 2); // 2 meters == <step> pixels\r\n        for (i = 0; i < num + 1; i += 2) {\r\n          for (var j = 0; j < num + 1; j ++) {\r\n            ctx.fillRect(Math.floor((i + j % 2) * step), Math.floor(j * step), Math.floor(step), Math.floor(step));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'squares': {\r\n        var numSquares = 16;\r\n        var squareSize = size / numSquares;\r\n        // Note: use THREE.NoColorSpace to perform operations on sRGB colors directly\r\n        col1 = new THREE.Color().setStyle(this.environmentData.groundColor, THREE.NoColorSpace);\r\n        col2 = new THREE.Color().setStyle(this.environmentData.groundColor2, THREE.NoColorSpace);\r\n        for (i = 0; i < numSquares * numSquares; i++) {\r\n          col = this.random(i + 3) > 0.5 ? col1.clone() : col2.clone();\r\n          col.addScalar(this.random(i + 3) * 0.1 - 0.05);\r\n          ctx.fillStyle = '#' + col.getHexString(THREE.NoColorSpace);\r\n\r\n          ctx.fillRect((i % numSquares) * squareSize, Math.floor(i / numSquares) * squareSize, squareSize, squareSize);\r\n        }\r\n        break;\r\n      }\r\n      case 'noise': {\r\n        // TODO: fix\r\n        imdata = ctx.getImageData(0, 0, size, size);\r\n        im = imdata.data;\r\n        // Note: use THREE.NoColorSpace to perform operations on sRGB colors directly\r\n        col1 = new THREE.Color().setStyle(this.environmentData.groundColor, THREE.NoColorSpace);\r\n        col2 = new THREE.Color().setStyle(this.environmentData.groundColor2, THREE.NoColorSpace);\r\n        var diff = new THREE.Color(col2.r - col1.r, col2.g - col1.g, col2.b - col1.b);\r\n        var perlin = new PerlinNoise();\r\n        for (i = 0, j = 0, numpixels = im.length; i < numpixels; i += 4, j++){\r\n          var rnd = perlin.noise((j % size) / size * 3, j / size / size * 3, 0);\r\n          im[i + 0] = Math.floor((col1.r + diff.r * rnd) * 255);\r\n          im[i + 1] = Math.floor((col1.g + diff.g * rnd) * 255);\r\n          im[i + 2] = Math.floor((col1.b + diff.b * rnd) * 255);\r\n        }\r\n        ctx.putImageData(imdata, 0, 0);\r\n        break;\r\n      }\r\n      case 'walkernoise': {\r\n        var s = Math.floor(size / 2);\r\n        var tex = document.createElement('canvas');\r\n        tex.width = s;\r\n        tex.height = s;\r\n        var texctx = tex.getContext('2d');\r\n        texctx.fillStyle = this.environmentData.groundColor;\r\n        texctx.fillRect(0, 0, s, s);\r\n        imdata = texctx.getImageData(0, 0, s, s);\r\n        im = imdata.data;\r\n        // Note: use THREE.NoColorSpace to perform operations on sRGB colors directly\r\n        col1 = new THREE.Color().setStyle(this.environmentData.groundColor, THREE.NoColorSpace);\r\n        col2 = new THREE.Color().setStyle(this.environmentData.groundColor2, THREE.NoColorSpace);\r\n        var walkers = [];\r\n        var numwalkers = 1000;\r\n        for (i = 0; i < numwalkers; i++) {\r\n          col = col1.clone().lerp(col2, Math.random());\r\n          walkers.push({\r\n            x: Math.random() * s,\r\n            y: Math.random() * s,\r\n            r: Math.floor(col.r * 255),\r\n            g: Math.floor(col.g * 255),\r\n            b: Math.floor(col.b * 255)\r\n          });\r\n        }\r\n        var iterations = 5000;\r\n        for (var it = 0; it< iterations; it++){\r\n          for (i = 0; i < numwalkers; i++) {\r\n            var walker = walkers[i];\r\n            var pos = Math.floor((walker.y * s + walker.x)) * 4;\r\n            im[pos + 0] = walker.r;\r\n            im[pos + 1] = walker.g;\r\n            im[pos + 2] = walker.b;\r\n            walker.x += Math.floor(Math.random() * 3) - 1;\r\n            walker.y += Math.floor(Math.random() * 3) - 1;\r\n            if (walker.x >= s) walker.x = walker.x - s;\r\n            if (walker.y >= s) walker.y = walker.y - s;\r\n            if (walker.x < 0) walker.x = s + walker.x;\r\n            if (walker.y < 0) walker.y = s + walker.y;\r\n          }\r\n        }\r\n        texctx.putImageData(imdata, 0, 0);\r\n        ctx.drawImage(tex, 0, 0, size, size);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  // returns an array of THREE.Geometry for set dressing\r\n  getAssetGeometry: function(data) {\r\n    if (!data) return null;\r\n    var geoset = [];\r\n    var self = this;\r\n    function applyNoise(geo, noise) {\r\n      var verts = geo.attributes.position.array;\r\n      var numVerts = verts.length;\r\n      for (var i = 0; i < numVerts; i+=3) {\r\n        verts[i] = (self.random(i) - 0.5) * noise;\r\n        verts[i+1] = (self.random(i + numVerts) - 0.5) * noise;\r\n        verts[i+2] = (self.random(i + numVerts * 2) - 0.5) * noise;\r\n      }\r\n      geo.attributes.position.needsUpdate = true;\r\n    }\r\n\r\n    var i, geo, verts;\r\n\r\n    for (var j = 0; j < data.length; j++) {\r\n\r\n      if (data[j].type == 'lathe') {\r\n        var maxy = -99999;\r\n        var points = [];\r\n        verts = data[j].vertices;\r\n        for (i = 0; i < verts.length; i += 2) {\r\n          points.push(new THREE.Vector2(verts[i], verts[i + 1]));\r\n          if (verts[i + 1] > maxy) {\r\n            maxy = verts[i + 1];\r\n          }\r\n        }\r\n        geo = new THREE.LatheGeometry(points, data[j]['segments'] || 8);\r\n        geo.applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(-Math.PI, 0, 0)));\r\n        geo.applyMatrix4(new THREE.Matrix4().makeTranslation(0, maxy, 0));\r\n        //if (data[j]['noise']) applyNoise(geo, data[j].noise);\r\n        geo = geo.toNonIndexed();\r\n        geoset.push(geo);\r\n      }\r\n\r\n      else if (data[j].type == 'extrude') {\r\n        var shape = new THREE.Shape();\r\n        verts = data[j].vertices;\r\n        for (i = 0; i < verts.length; i+= 2) {\r\n          if (i == 0) shape.moveTo(verts[i], verts[i + 1]);\r\n          else shape.lineTo(verts[i], verts[i + 1]);\r\n        }\r\n        geo = new THREE.ExtrudeGeometry(shape, {amount: 1, bevelEnabled: false});\r\n        geo.applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0)));\r\n        if (data[j]['noise']) applyNoise(geo, data[j].noise);\r\n        geoset.push(geo);\r\n      }\r\n\r\n      else if (data[j].type == 'mesh') {\r\n        geo = new THREE.BufferGeometry();\r\n        verts = data[j].vertices;\r\n        var faces = data[j].faces;\r\n        var positions = new Float32Array(verts);\r\n\r\n        geo.setIndex(faces);\r\n        geo.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n\r\n        if (data[j]['mirror']) {\r\n          var mirroredGeo = geo.clone();\r\n          mirroredGeo.applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(0, Math.PI, 0)));\r\n          var mergeGeometries = THREE.BufferGeometryUtils.mergeGeometries || THREE.BufferGeometryUtils.mergeBufferGeometries;\r\n          geo = mergeGeometries([geo, mirroredGeo]);\r\n        }\r\n\r\n        if (data[j]['noise']) applyNoise(geo, data[j].noise);\r\n\r\n        geo = geo.toNonIndexed();\r\n        geo.computeVertexNormals();\r\n        geoset.push(geo);\r\n      }\r\n    }\r\n    return geoset;\r\n  },\r\n\r\n  // updates set dressing\r\n  updateDressing: function () {\r\n    var dressing = new THREE.Object3D();\r\n    var geometries = [];\r\n    this.dressing.setAttribute('visible', this.environmentData.dressing != 'none');\r\n    if (this.environmentData.dressing == 'none') {\r\n      return;\r\n    }\r\n\r\n    // get array of geometries\r\n    var geoset;\r\n    switch (this.environmentData.dressing){\r\n      case 'cubes': {\r\n        geoset = [new THREE.BoxGeometry(1, 1, 1)];\r\n        geoset[0].applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\r\n        break;\r\n      }\r\n      case 'pyramids': {\r\n        geoset = [new THREE.ConeGeometry(1, 1, 4, 1, true)];\r\n        geoset[0].applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\r\n        break;\r\n      }\r\n      case 'cylinders': {\r\n        geoset = [new THREE.CylinderGeometry(0.5, 0.5, 1, 8, 1, true)];\r\n        geoset[0].applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\r\n        break;\r\n      }\r\n      default: {\r\n        geoset = this.getAssetGeometry(this.assets[this.environmentData.dressing]);\r\n        if (!geoset) return;\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (var i = 0, r = 88343; i < this.environmentData.dressingAmount; i++, r++) {\r\n\r\n      var geo = geoset[Math.floor(this.random(33 + i) * geoset.length)].clone();\r\n\r\n      // set random position, rotation and scale\r\n      var ds = this.environmentData.dressingScale;\r\n      var dv = new THREE.Vector3(this.environmentData.dressingVariance.x, this.environmentData.dressingVariance.y, this.environmentData.dressingVariance.z);\r\n      var distance;\r\n      var onPlayArea = this.random(r) < this.environmentData.dressingOnPlayArea;\r\n      if (onPlayArea) {\r\n        distance = this.random(r + 1) * 15;\r\n      }\r\n      else {\r\n        distance = 10 + Math.max(dv.x, dv.z) + 10 * this.random(r + 1) + this.random(r + 2) * this.STAGE_SIZE / 3;\r\n      }\r\n\r\n      var direction = this.random(r + 3) * Math.PI * 2;\r\n      var matrix = new THREE.Matrix4();\r\n      var scale = this.random(r + 4);\r\n      var uniformScale = this.environmentData.dressingUniformScale;\r\n\r\n      matrix.compose(\r\n        // position\r\n        new THREE.Vector3(\r\n          Math.cos(direction) * distance,\r\n          0,\r\n          Math.sin(direction) * distance\r\n          ),\r\n        // rotation\r\n        new THREE.Quaternion().setFromAxisAngle(\r\n          new THREE.Vector3(0, 1, 0),\r\n          (this.random(r + 5) - 0.5) * dv.length() * Math.PI * 2\r\n          ),\r\n        // scale\r\n        new THREE.Vector3(\r\n           ds + (uniformScale ? scale : this.random(r + 6)) * dv.x,\r\n           ds + (uniformScale ? scale : this.random(r + 7)) * dv.y,\r\n           ds + (uniformScale ? scale : this.random(r + 8)) * dv.z\r\n          )\r\n        );\r\n        geo.applyMatrix4(matrix);\r\n        geometries.push(geo);\r\n    }\r\n\r\n    // convert geometry to buffergeometry\r\n    var mergeGeometries = THREE.BufferGeometryUtils.mergeGeometries || THREE.BufferGeometryUtils.mergeBufferGeometries;\r\n    var bufgeo = mergeGeometries(geometries);\r\n    bufgeo.attributes.position.needsUpdate = true;\r\n\r\n    // setup Material\r\n    var material = new THREE.MeshLambertMaterial({\r\n      color: new THREE.Color(this.environmentData.dressingColor)\r\n    });\r\n    this.rendererSystem.applyColorCorrection(material.color);\r\n\r\n    // create mesh\r\n    var mesh = new THREE.Mesh(bufgeo, material);\r\n    dressing.add(mesh);\r\n    // add to scene\r\n    this.dressing.setObject3D('mesh', dressing);\r\n  },\r\n\r\n  // initializes the BufferGeometry for the stars\r\n  createStars: function() {\r\n    var numStars = 2000;\r\n    var geometry = new THREE.BufferGeometry();\r\n    var positions = new Float32Array( numStars * 3 );\r\n    var radius = this.STAGE_SIZE - 1;\r\n    var v = new THREE.Vector3();\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n      v.set(this.random(i + 23) - 0.5, this.random(i + 24), this.random(i + 25) - 0.5);\r\n      v.normalize();\r\n      v.multiplyScalar(radius);\r\n      positions[i  ] = v.x;\r\n      positions[i+1] = v.y;\r\n      positions[i+2] = v.z;\r\n    }\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    geometry.setDrawRange(0, 0); // don't draw any yet\r\n    var material = new THREE.PointsMaterial({size: 0.01, color: 0xCCCCCC, fog: false});\r\n    this.rendererSystem.applyColorCorrection(material.color);\r\n    this.stars.setObject3D('mesh', new THREE.Points(geometry, material));\r\n  },\r\n\r\n  // removes and disposes the BufferGeometry of the stars\r\n  removeStars: function() {\r\n    if (!this.stars) return;\r\n\r\n    var mesh = this.stars.getObject3D('mesh');\r\n    mesh.material.dispose();\r\n    mesh.geometry.dispose();\r\n\r\n    this.el.removeChild(this.stars);\r\n    this.stars = null;\r\n  },\r\n\r\n  // Sets the number of stars visible. Calls createStars() to initialize if needed.\r\n  setStars: function (numStars) {\r\n    numStars = Math.floor(Math.min(2000, Math.max(0, numStars)));\r\n    if (numStars === 0) {\r\n      this.removeStars();\r\n    } else {\r\n      if (!this.stars) {\r\n        this.stars = document.createElement('a-entity');\r\n        this.stars.id = 'stars';\r\n        this.createStars();\r\n        this.el.appendChild(this.stars);\r\n      }\r\n      this.stars.getObject3D('mesh').geometry.setDrawRange(0, numStars);\r\n    }\r\n  }\r\n});\r\n\r\n// atmosphere sky shader. From https://github.com/aframevr/aframe/blob/master/examples/test/shaders/shaders/sky.js\r\nAFRAME.registerShader('skyshader', {\r\n  schema: {\r\n    exposureBias: { type: 'number', default: 1.0, min: 0, max: 10, is: 'uniform' },\r\n    turbidity: { type: 'number', default: 2, min: 0, max: 20, is: 'uniform' },\r\n    reileigh: { type: 'number', default: 1, min: 0, max: 4, is: 'uniform' },\r\n    mieCoefficient: { type: 'number', default: 0.005, min: 0, max: 0.1, is: 'uniform' },\r\n    mieDirectionalG: { type: 'number', default: 0.8, min: 0, max: 1, is: 'uniform' },\r\n    sunPosition: { type: 'vec3', default: {x: 0, y: 0, z: -1}, is: 'uniform' },\r\n    color: {type: 'color', default: '#fff'} //placeholder to remove warning\r\n  },\r\n\r\n  vertexShader: [\r\n    'varying vec3 vWorldPosition;',\r\n    'void main() {',\r\n    'vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n    'vWorldPosition = worldPosition.xyz;',\r\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n    '}'\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n    '#include <common>',\r\n    '#include <dithering_pars_fragment>',\r\n    'uniform sampler2D skySampler;',\r\n    'uniform vec3 sunPosition;',\r\n    'varying vec3 vWorldPosition;',\r\n\r\n    'vec3 cameraPos = vec3(0., 0., 0.);',\r\n\r\n    'uniform float exposureBias;',\r\n    'uniform float turbidity;',\r\n    'uniform float reileigh;',\r\n    'uniform float mieCoefficient;',\r\n    'uniform float mieDirectionalG;',\r\n\r\n    // constants for atmospheric scattering'\r\n    'const float e = 2.71828182845904523536028747135266249775724709369995957;',\r\n    'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n    // refractive index of air\r\n    'const float n = 1.0003;',\r\n    // number of molecules per unit volume for air at'\r\n    'const float N = 2.545E25;' ,\r\n    // 288.15K and 1013mb (sea level -45 celsius)\r\n    // depolatization factor for standard air\r\n    'const float pn = 0.035;',\r\n    // wavelength of used primaries, according to preetham\r\n    'const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);',\r\n\r\n    // mie stuff\r\n    // K coefficient for the primaries\r\n    'const vec3 K = vec3(0.686, 0.678, 0.666);',\r\n    'const float v = 4.0;',\r\n\r\n    // optical length at zenith for molecules\r\n    'const float rayleighZenithLength = 8.4E3;',\r\n    'const float mieZenithLength = 1.25E3;',\r\n    'const vec3 up = vec3(0.0, 1.0, 0.0);',\r\n\r\n    'const float EE = 1000.0;',\r\n    'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\r\n    // 66 arc seconds -> degrees, and the cosine of that\r\n\r\n    // earth shadow hack'\r\n    'const float cutoffAngle = pi/1.95;',\r\n    'const float steepness = 1.5;',\r\n\r\n    'vec3 totalRayleigh(vec3 lambda)',\r\n    '{',\r\n    'return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));',\r\n    '}',\r\n\r\n    // see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\r\n    // A simplied version of the total Rayleigh scattering to works on browsers that use ANGLE\r\n    'vec3 simplifiedRayleigh()',\r\n    '{',\r\n    'return 0.0005 / vec3(94, 40, 18);',\r\n    '}',\r\n\r\n    'float rayleighPhase(float cosTheta)',\r\n    '{   ',\r\n    'return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\r\n    '}',\r\n\r\n    'vec3 totalMie(vec3 lambda, vec3 K, float T)',\r\n    '{',\r\n    'float c = (0.2 * T ) * 10E-18;',\r\n    'return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;',\r\n    '}',\r\n\r\n    'float hgPhase(float cosTheta, float g)',\r\n    '{',\r\n    'return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));',\r\n    '}',\r\n\r\n    'float sunIntensity(float zenithAngleCos)',\r\n    '{',\r\n    'return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));',\r\n    '}',\r\n\r\n    '// Filmic ToneMapping http://filmicgames.com/archives/75',\r\n    'float A = 0.15;',\r\n    'float B = 0.50;',\r\n    'float C = 0.10;',\r\n    'float D = 0.20;',\r\n    'float E = 0.02;',\r\n    'float F = 0.30;',\r\n    'float W = 1000.0;',\r\n\r\n    'vec3 Uncharted2Tonemap(vec3 x)',\r\n    '{',\r\n    'return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;',\r\n    '}',\r\n\r\n    'void main() ',\r\n    '{',\r\n    'float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);',\r\n\r\n    'float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));',\r\n\r\n    'vec3 sunDirection = normalize(sunPosition);',\r\n\r\n    'float sunE = sunIntensity(dot(sunDirection, up));',\r\n\r\n    // extinction (absorbtion + out scattering)\r\n    // rayleigh coefficients\r\n\r\n    'vec3 betaR = simplifiedRayleigh() * reileighCoefficient;',\r\n\r\n    // mie coefficients\r\n    'vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;',\r\n\r\n    // optical length\r\n    // cutoff angle at 90 to avoid singularity in next formula.\r\n    'float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));',\r\n    'float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\r\n    'float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\r\n\r\n    // combined extinction factor\r\n    'vec3 Fex = exp(-(betaR * sR + betaM * sM));',\r\n\r\n    // in scattering\r\n    'float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);',\r\n\r\n    'float rPhase = rayleighPhase(cosTheta*0.5+0.5);',\r\n    'vec3 betaRTheta = betaR * rPhase;',\r\n\r\n    'float mPhase = hgPhase(cosTheta, mieDirectionalG);',\r\n    'vec3 betaMTheta = betaM * mPhase;',\r\n\r\n    'vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));',\r\n    'Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));',\r\n\r\n    //nightsky\r\n    'vec3 direction = normalize(vWorldPosition - cameraPos);',\r\n    'float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]',\r\n    'float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]',\r\n    'vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);',\r\n    // vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\r\n    'vec3 L0 = vec3(0.1) * Fex;',\r\n\r\n    // composition + solar disc\r\n    'float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);',\r\n    'L0 += (sunE * 19000.0 * Fex)*sundisk;',\r\n\r\n    'vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));',\r\n\r\n    'vec3 texColor = (Lin+L0);',\r\n    'texColor *= 0.04;',\r\n    'texColor += vec3(0.0,0.001,0.0025)*0.3;',\r\n\r\n    'vec3 curr = Uncharted2Tonemap(exposureBias*texColor);',\r\n    'vec3 color = curr*whiteScale;',\r\n\r\n    'vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));',\r\n\r\n    'gl_FragColor.rgb = retColor;',\r\n\r\n    'gl_FragColor.a = 1.0;',\r\n    '#include <dithering_fragment>',\r\n    '}'\r\n  ].join('\\n')\r\n});\r\n\r\n\r\n// gradient sky shader\r\n\r\nAFRAME.registerShader('gradientshader', {\r\n  schema: {\r\n    topColor: {type: 'color', default: '1 0 0', is: 'uniform'},\r\n    bottomColor: {type: 'color', default: '0 0 1', is: 'uniform'}\r\n  },\r\n\r\n  vertexShader: [\r\n    'varying vec3 vWorldPosition;',\r\n    'void main() {',\r\n    ' vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n    ' vWorldPosition = worldPosition.xyz;',\r\n    ' gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );',\r\n    '}'\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n    '#include <common>',\r\n    '#include <dithering_pars_fragment>',\r\n    'uniform vec3 bottomColor;',\r\n    'uniform vec3 topColor;',\r\n    'uniform float offset;',\r\n    'varying vec3 vWorldPosition;',\r\n    'void main() {',\r\n    ' float h = normalize( vWorldPosition ).y;',\r\n    ' gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max(h, 0.0 ), 0.8 ), 0.0 ) ), 1.0 );',\r\n    ' #include <dithering_fragment>',\r\n    '}'\r\n  ].join('\\n')\r\n});\r\n\r\n// perlin noise generator\r\n// from https://gist.github.com/banksean/304522\r\n\r\nvar PerlinNoise = function(seed) {\r\n  var randomWithSeed;\r\n  this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];\r\n  this.p = [];\r\n  var i;\r\n  for (i=0; i<256; i++) {\r\n    randomWithSeed = parseFloat('0.' + Math.sin(seed * 9999 * i).toString().substr(7));\r\n    this.p[i] = Math.floor(randomWithSeed * 256);\r\n  }\r\n  // To remove the need for index wrapping, double the permutation table length\r\n  this.perm = [];\r\n  for(i=0; i<512; i++) {\r\n    this.perm[i]=this.p[i & 255];\r\n  }\r\n};\r\n\r\nPerlinNoise.prototype.dot = function(g, x, y, z) {\r\n  return g[0]*x + g[1]*y + g[2]*z;\r\n};\r\n\r\nPerlinNoise.prototype.mix = function(a, b, t) {\r\n  return (1.0-t)*a + t*b;\r\n};\r\n\r\nPerlinNoise.prototype.fade = function(t) {\r\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n};\r\n\r\n// Classic Perlin noise, 3D version\r\nPerlinNoise.prototype.noise = function(x, y, z) {\r\n  // Find unit grid cell containing point\r\n  var X = Math.floor(x);\r\n  var Y = Math.floor(y);\r\n  var Z = Math.floor(z);\r\n\r\n  // Get relative xyz coordinates of point within that cell\r\n  x = x - X;\r\n  y = y - Y;\r\n  z = z - Z;\r\n\r\n  // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n  X = X & 255;\r\n  Y = Y & 255;\r\n  Z = Z & 255;\r\n\r\n  // Calculate a set of eight hashed gradient indices\r\n  var gi000 = this.perm[X+this.perm[Y+this.perm[Z]]] % 12;\r\n  var gi001 = this.perm[X+this.perm[Y+this.perm[Z+1]]] % 12;\r\n  var gi010 = this.perm[X+this.perm[Y+1+this.perm[Z]]] % 12;\r\n  var gi011 = this.perm[X+this.perm[Y+1+this.perm[Z+1]]] % 12;\r\n  var gi100 = this.perm[X+1+this.perm[Y+this.perm[Z]]] % 12;\r\n  var gi101 = this.perm[X+1+this.perm[Y+this.perm[Z+1]]] % 12;\r\n  var gi110 = this.perm[X+1+this.perm[Y+1+this.perm[Z]]] % 12;\r\n  var gi111 = this.perm[X+1+this.perm[Y+1+this.perm[Z+1]]] % 12;\r\n\r\n  // The gradients of each corner are now:\r\n  // g000 = grad3[gi000];\r\n  // g001 = grad3[gi001];\r\n  // g010 = grad3[gi010];\r\n  // g011 = grad3[gi011];\r\n  // g100 = grad3[gi100];\r\n  // g101 = grad3[gi101];\r\n  // g110 = grad3[gi110];\r\n  // g111 = grad3[gi111];\r\n  // Calculate noise contributions from each of the eight corners\r\n  var n000= this.dot(this.grad3[gi000], x, y, z);\r\n  var n100= this.dot(this.grad3[gi100], x-1, y, z);\r\n  var n010= this.dot(this.grad3[gi010], x, y-1, z);\r\n  var n110= this.dot(this.grad3[gi110], x-1, y-1, z);\r\n  var n001= this.dot(this.grad3[gi001], x, y, z-1);\r\n  var n101= this.dot(this.grad3[gi101], x-1, y, z-1);\r\n  var n011= this.dot(this.grad3[gi011], x, y-1, z-1);\r\n  var n111= this.dot(this.grad3[gi111], x-1, y-1, z-1);\r\n  // Compute the fade curve value for each of x, y, z\r\n  var u = this.fade(x);\r\n  var v = this.fade(y);\r\n  var w = this.fade(z);\r\n   // Interpolate along x the contributions from each of the corners\r\n  var nx00 = this.mix(n000, n100, u);\r\n  var nx01 = this.mix(n001, n101, u);\r\n  var nx10 = this.mix(n010, n110, u);\r\n  var nx11 = this.mix(n011, n111, u);\r\n  // Interpolate the four results along y\r\n  var nxy0 = this.mix(nx00, nx10, v);\r\n  var nxy1 = this.mix(nx01, nx11, v);\r\n  // Interpolate the two last results along z\r\n  var nxyz = this.mix(nxy0, nxy1, w);\r\n\r\n  return nxyz;\r\n};\r\n"],
  "mappings": "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AAU,CAAC,KAAI,KAAI,GAAE,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,MAAK,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,GAAE,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,MAAK,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,GAAE,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,GAAE,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,MAAK,MAAK,KAAI,GAAE,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,MAAK,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,GAAE,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,MAAK,KAAI,MAAK,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,IAAG,MAAK,MAAK,KAAI,MAAK,MAAK,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,GAAE,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,MAAK,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,KAAI,MAAK,KAAI,MAAK,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,MAAK,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,MAAK,MAAK,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,GAAE,MAAK,IAAG,KAAI,MAAK,GAAE,KAAI,MAAK,KAAI,GAAE,MAAK,IAAG,MAAK,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,IAAG,MAAK,MAAK,IAAG,KAAI,MAAK,IAAG,MAAK,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAG,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,KAAI,MAAK,KAAI,IAAI;AAAA,UAC93E,OAAO,CAAC,IAAG,KAAI,KAAI,GAAE,KAAI,KAAI,KAAI,IAAG,GAAE,GAAE,KAAI,IAAG,IAAG,KAAI,GAAE,GAAE,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,KAAI,KAAI,IAAG,GAAE,GAAE,KAAI,IAAG,IAAG,KAAI,GAAE,GAAE,KAAI,KAAI,GAAE,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,GAAE,GAAE,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,GAAE,GAAE,KAAI,IAAG,IAAG,KAAI,GAAE,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,GAAE,KAAI,KAAI,GAAE,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,GAAE,KAAI,IAAG,IAAG,KAAI,GAAE,GAAE,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,GAAE,GAAE,KAAI,KAAI,GAAE,KAAI,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,GAAE,KAAI,IAAG,KAAI,GAAE,GAAE,KAAI,IAAG,KAAI,KAAI,KAAI,GAAE,KAAI,KAAI,KAAI,KAAI,GAAE,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,GAAE,KAAI,KAAI,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,IAAG,GAAE,KAAI,IAAG,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,GAAE,IAAG,KAAI,KAAI,GAAE,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,IAAG,GAAE,KAAI,IAAG,KAAI,GAAE,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,IAAG,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI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",
  "names": ["geo", "verts", "i"]
}
